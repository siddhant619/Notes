#Next.js net ninja
Framwork for creating pre-rendered React websites. Two forms of pre-rendering are-
1-Server side rendering(SSR)- Here react components are rendered into HTML pages on the server after a page
req comes from the browser. Means react component are already rendered into HTML pages b4 they reach the
browser

2-Static site generation(SSG)- Here react components are rendered into HTML pages at build time

When to use what- https://next-learn-starter.vercel.app/posts/ssg-ssr


-Without next.js react renderes components in browser instead- This is CLIENT SIDE RENDERING

-Benefit of SSR- Pre-rendering imporves performance, better SEO.

#SETUP
npx create-next-app appname
npm run dev

#Each page has a component inside pages.
#Routing
Create file then route will automatically be created for that file name.
eg. file name test.js in pages folder then http://localhost:3000/test will be the route.
 
-If we want drop-in components that are not seperate pages, put them in seperate folder eg components
then import

-#use of _app ->to wrap other ocomponents around all pages
(netninja vid 5)


##Linking-  Next.js does client-side routing,  ie. navigation done using js and not page request to server.
import Link from 'next/link'
eg. <Link href="/ninjas/about"><a>About</a></Link>

#Next.js does code splitting automatically- only load the page currently displayed. As we navigate the 
pages are loaded(read more). See in n/w tab
In production if a page has links then those pages are also loaded, this gives fast user experience.

#Creating a layout component- eg wrapping main content in header and footer(as they appear on every page)
Inside _app.js
<Layout>
   	<Component {...pageProps} />
</Layout>

Inside Layout.js
 <div>
        <Nav />
        {children}
        <Footer />
 </div>

#Serving static assests- Images
Next.js has a built-in image component. It does optimization- lazy loading(only load img when it enters viewport
, also does resizing-responsiveness.
import Image from 'next/image'

const YourComponent = () => (
  <Image
    src="/images/profile.jpg" // Route of the image file. Store image in public/images
    height={144} // Desired size with correct aspect ratio
    width={144} // Desired size with correct aspect ratio
    alt="Your Name"
  />
)


#Styling
In styles folder- Global.css and module.css(for CSS modules)
CSS modules -allows us to write page/section specific styles. Import it in the component that needs it and styles
are scoped to that component by adding random chars to classname

#REDIRECTING- useRouter() hook
import { useRouter } from 'next/router'
You don't need to use router.push for external URLs. window.location is better suited for those cases.
-const router=useRouter();
-router.go(-1) //go back, 1 for forward
-router.push('/') //redirect to home


#Pre-rendering and data fetching
By default, Next.js pre-renders every page. This means that Next.js generates HTML for each page in advance,
 instead of having it all done by client-side JavaScript.
Proof that next.js pre-renders the app in static HTML -> disable js in browser then load app in next.js will run
(means content will be displayed but not interactive), but wont display app with create-react-app.

#Static Generation with Data using getStaticProps
getStaticProps runs at build time in production, and…
Inside the function, you can fetch external data and send it as props to the page.
Essentially, getStaticProps allows you to tell Next.js: “Hey, this page has some data dependencies —
 so when you pre-render this page at build time, make sure to resolve them first!”
Note: In development mode, getStaticProps runs on each request instead.

#IMAGE component next.js
#Layout prop
-Intrinsic- Image becomes smaller for smaller viewports but will remain
fixed for larger viewports(by fixed i mean same size as specified by width
and height). 
This is like CSS max-width
-Responsive- Image smaller for smaller vp and larger for larger vp.
Basically img fill the container. It is bad if img is small, might get stretched.
Here a large no. of srcset are provided(which is not the case for fixed and intrinsic!).
This is like CSS width:100%
-Fixed - same as normal img tag. No scale up or down. Like CSS width:
-Image component automatically does lazy loading- means only the imgs visible
in the current viewport are loaded

#Image optimization- observation
-If img size is small (intrinsic), ie. width and height are specified small
then the img download size is less(in network tab). And on increasing height and
width larger img is downloaded.
-If we view img in mobile(or smaller screen) img download size is less.
If we view in desktop larger downloaded size.

-Docs-"The Automatic Image Optimization allows for resizing, optimizing,
 and serving images in modern formats like WebP when the browser supports it. "
This avoids shipping large images to devices with a smaller viewport

#Good article on next/img https://dev.to/yago/understanding-next-image-13ff

